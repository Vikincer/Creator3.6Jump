{"version":3,"sources":["file:///D:/Hword/wx/maomao/Creator3.6Jump/assets/Scripts/GameManager.ts"],"names":["_decorator","Component","Prefab","instantiate","Node","Vec3","PlayerController","ccclass","property","BlockType","GameState","GameManager","type","_road","start","curState","GS_INIT","playerCtrl","node","on","onPlayerJumpEnd","init","startMenu","active","generateRoad","setInputActive","setPosition","ZERO","value","GS_PLAYING","setTimeout","GS_END","removeAllChildren","push","BT_STONE","i","roadLength","BT_NONE","Math","floor","random","j","length","block","spawnBlockByType","addChild","cubePrfb","onStartButtonClicked","checkResult","moveIndex"],"mappings":"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","sourcesContent":["import { _decorator, Component, Prefab, instantiate, Node, CCInteger,Vec3 } from 'cc';\nconst { ccclass, property } = _decorator;\nimport {PlayerController} from './PlayerController';\n\n// 赛道格子类型，坑（BT_NONE）或者实路（BT_STONE）\nenum BlockType {\n    BT_NONE,\n    BT_STONE,\n};\n\nenum GameState{\n    GS_INIT,\n    GS_PLAYING,\n    GS_END,\n};\n\n@ccclass(\"GameManager\")\nexport class GameManager extends Component {\n\n    // 赛道预制\n    @property({type: Prefab})\n    public cubePrfb: Prefab | null = null;\n    // 赛道长度\n    @property\n    public roadLength = 50;\n    private _road: BlockType[] = [];\n\n    start () {\n        this.curState = GameState.GS_INIT;\n        this.playerCtrl?.node.on('JumpEnd', this.onPlayerJumpEnd, this);\n    }\n\n    init() {\n        // 激活主界面\n        if (this.startMenu) {\n            this.startMenu.active = true;\n        }\n        // 生成赛道\n        this.generateRoad();\n        if(this.playerCtrl){\n            // 禁止接收用户操作人物移动指令\n            this.playerCtrl.setInputActive(false);\n            // 重置人物位置\n            this.playerCtrl.node.setPosition(Vec3.ZERO);\n        }\n    }\n    set curState (value: GameState) {\n        switch(value) {\n            case GameState.GS_INIT:\n                this.init();\n                break;\n            case GameState.GS_PLAYING:\n                if (this.startMenu) {\n                    this.startMenu.active = false;\n                }\n                // 设置 active 为 true 时会直接开始监听鼠标事件，此时鼠标抬起事件还未派发\n                // 会出现的现象就是，游戏开始的瞬间人物已经开始移动\n                // 因此，这里需要做延迟处理\n                setTimeout(() => {\n                    if (this.playerCtrl) {\n                        this.playerCtrl.setInputActive(true);\n                    }\n                }, 0.1);\n                break;\n            case GameState.GS_END:\n                break;\n        }\n    }\n\n    generateRoad() {\n        // 防止游戏重新开始时，赛道还是旧的赛道\n        // 因此，需要移除旧赛道，清除旧赛道数据\n        this.node.removeAllChildren();\n        this._road = [];\n        // 确保游戏运行时，人物一定站在实路上\n        this._road.push(BlockType.BT_STONE);\n\n        // 确定好每一格赛道类型\n        for (let i = 1; i < this.roadLength; i++) {\n            // 如果上一格赛道是坑，那么这一格一定不能为坑\n            if (this._road[i-1] === BlockType.BT_NONE) {\n                this._road.push(BlockType.BT_STONE);\n            } else {\n                this._road.push(Math.floor(Math.random() * 2));\n            }\n        }\n\n        // 根据赛道类型生成赛道\n        for (let j = 0; j < this._road.length; j++) {\n            let block: Node = this.spawnBlockByType(this._road[j]);\n            // 判断是否生成了道路，因为 spawnBlockByType 有可能返回坑（值为 null）\n            if (block) {\n                this.node.addChild(block);\n                block.setPosition(j, -1.5, 0);\n            }\n        }\n    }\n\n    spawnBlockByType(type: BlockType) {\n        if (!this.cubePrfb) {\n            return null;\n        }\n\n        let block: Node | null = null;\n        // 赛道类型为实路才生成\n        switch(type) {\n            case BlockType.BT_STONE:\n                block = instantiate(this.cubePrfb);\n                break;\n        }\n\n        return block;\n    }\n\n    // update (deltaTime: number) {\n    //     // Your update function goes here.\n    // }\n    @property({type: PlayerController})\n    public playerCtrl: PlayerController | null = null;\n\n    @property({type: Node})\n    public startMenu: Node | null = null;\n\n    onStartButtonClicked() {\n        this.curState = GameState.GS_PLAYING;\n    }\n\n    checkResult(moveIndex: number) {\n        if (moveIndex < this.roadLength) {\n            // 跳到了坑上\n            if (this._road[moveIndex] == BlockType.BT_NONE) {\n                this.curState = GameState.GS_INIT;\n            }\n        } else {    // 跳过了最大长度\n            this.curState = GameState.GS_INIT;\n        }\n    }\n\n    onPlayerJumpEnd(moveIndex: number) {\n        this.checkResult(moveIndex);\n    }\n}\n"]}